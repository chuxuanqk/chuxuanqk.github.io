<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 库推荐</title>
    <url>/2020/03/12/C++%20%E5%BA%93%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="使用笔记"><a href="#使用笔记" class="headerlink" title="使用笔记"></a>使用笔记</h3><p><a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">json for modern c++</a></p>
<ul>
<li><a href="https://json.nlohmann.me/features/parsing/parse_exceptions/#wide-string-handling" target="_blank" rel="noopener">Parsing and Exceptions</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux 串口编程</title>
    <url>/2020/03/11/Linux%20%E4%B8%B2%E5%8F%A3%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>Linux 串口编程</p>
<a id="more"></a>
<h1 align = "center">Linux 串口编程</h1>



<p><strong>1.串口接收超时设置</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收单字节</span></span><br><span class="line"><span class="keyword">int</span> _uart_recv_byte(<span class="keyword">miio_uart_t</span> *uart, <span class="keyword">uint8_t</span>* c, <span class="keyword">uint32_t</span> timeout_ms)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* the following is an example for linux platform */</span></span><br><span class="line">	<span class="comment">/* user should adjust below for each mcu platform */</span></span><br><span class="line">	<span class="comment">/* adjust start */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">opt</span>;</span>	<span class="comment">/* set uart timeout */</span></span><br><span class="line">	tcgetattr(uart-&gt;fd, &amp;opt);</span><br><span class="line">	opt.c_cc[VTIME] = timeout_ms / <span class="number">100</span>; </span><br><span class="line">	tcsetattr(uart-&gt;fd, TCSADRAIN, &amp;opt);</span><br><span class="line">	<span class="comment">/* adjust end */</span></span><br><span class="line"></span><br><span class="line">	arch_os_mutex_get(&amp;(uart-&gt;read_mutex));</span><br><span class="line">	<span class="comment">/* adjust start */</span></span><br><span class="line">	<span class="keyword">int</span> n_read = <span class="built_in">read</span>(uart-&gt;fd, c, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">/* adjust end */</span></span><br><span class="line">	arch_os_mutex_put(&amp;(uart-&gt;read_mutex));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> n_read;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收多个字节</span></span><br><span class="line"><span class="keyword">int</span> _Xmodem_recv_str(<span class="keyword">miio_uart_t</span> *uart, <span class="keyword">uint8_t</span>* buf, <span class="keyword">uint32_t</span> timeout_ms)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* the following is an example for linux platform */</span></span><br><span class="line">        <span class="comment">/* user should adjust below for each mcu platform */</span></span><br><span class="line">        <span class="comment">/* adjust start */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">opt</span>;</span>     <span class="comment">/* set uart timeout */</span></span><br><span class="line">        tcgetattr(uart-&gt;fd, &amp;opt);</span><br><span class="line">        opt.c_cc[VTIME] = timeout_ms / <span class="number">100</span>;<span class="comment">// / 100;</span></span><br><span class="line">        tcsetattr(uart-&gt;fd, TCSADRAIN, &amp;opt);</span><br><span class="line">        <span class="comment">/* adjust end */</span></span><br><span class="line">        arch_os_mutex_get(&amp;(uart-&gt;read_mutex));</span><br><span class="line">        <span class="comment">/* adjust start */</span></span><br><span class="line">        <span class="keyword">int</span> n_read = <span class="built_in">read</span>(uart-&gt;fd, buf, USER_UART_RXBUF_SIZE);</span><br><span class="line">        buf[n_read] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="comment">/* adjust end */</span></span><br><span class="line">        arch_os_mutex_put(&amp;(uart-&gt;read_mutex));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n_read;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>c++ 笔记</title>
    <url>/2022/05/07/C++%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>c++ 笔记<br><a id="more"></a></p>
<h4 id="C-11-Lambda表达式"><a href="#C-11-Lambda表达式" class="headerlink" title="C++11 Lambda表达式"></a>C++11 Lambda表达式</h4><p>Lambda表达式完整的声明格式:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>](params <span class="built_in">list</span>) <span class="keyword">mutable</span> exception-&gt; <span class="keyword">return</span> type &#123;function body&#125;</span><br></pre></td></tr></table></figure>
<p>各项具体含义如下：</p>
<ol>
<li>capture list：捕获外部变量列表</li>
<li>params list：形参列表</li>
<li>mutable指示符：用来说用是否可以修改捕获的变量</li>
<li>exception：异常设定</li>
<li>return type：返回类型</li>
<li>function body：函数体</li>
</ol>
<p><strong>[<a href="https://www.cnblogs.com/TianFang/p/3163229.html" target="_blank" rel="noopener">C++ 11中几个我比较喜欢的语法</a>]</strong></p>
<ul>
<li><p>原生字符串 </p>
<p>string path = R”(C:\Program Files\Microsoft.NET\ADOMD.NET)”;</p>
</li>
</ul>
<p>字符串里面可以带引号，例如：</p>
<p>  string path = R”(this “word” is escaped)”;</p>
<p>C++ 11 语法格式：1. 字符串前加 ‘R’ 前缀；2.字符串首尾加上括号 ()</p>
<p><a href="https://github.com/Tencent/rapidjson/issues/1537" target="_blank" rel="noopener">Rapidjson 处理多个json分离解析</a></p>
]]></content>
  </entry>
  <entry>
    <title>CMake 笔记</title>
    <url>/2020/03/12/CMake_%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>CMake 笔记</p>
<a id="more"></a>
<p><a href="https://github.com/fenneishi/cmake" target="_blank" rel="noopener">CMake_资料1</a></p>
<p>example:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cmake版本要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(DummyImport CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定为C++11 版本</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(../../single_include)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(create_json main.cpp)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Markdown数学公式语法</title>
    <url>/2020/03/11/Markdown/</url>
    <content><![CDATA[<p>本篇为Hexo示例文档.  # 这里是摘要部分,写1~2句话,就实现不全显示博文了..</p>
<a id="more"></a>
<h1 id="Markdown数学公式语法"><a href="#Markdown数学公式语法" class="headerlink" title="Markdown数学公式语法"></a>Markdown数学公式语法</h1><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol>
<li>行内公式：将公式插入到本行内，符号：<script type="math/tex">公式内容</script>，如：$xyz$</li>
<li>独行公式：将公式插入到新的一行内，并且居中，符号：<script type="math/tex">$公式内容$$$，如：</script>xyz$$</li>
</ol>
<h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol>
<li>上标符号，符号：<code>^</code>，如：$x^4$</li>
<li>下标符号，符号：<code>_</code>，如：$x_1$</li>
<li>组合符号，符号：<code>{}</code>，如：${16}<em>{8}O{2+}</em>{2}$</li>
</ol>
<h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol>
<li>汉字形式，符号：<code>\mbox{}</code>，如：$V_{\mbox{初始}}$</li>
<li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li>
<li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li>
<li>标签，符号<code>\tag{数字}</code>，如：$\tag{11}$</li>
<li>上大括号，符号：<code>\overbrace{算式}</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li>
<li>下大括号，符号：<code>\underbrace{算式}</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li>
<li>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li>
</ol>
<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol>
<li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li>
<li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li>
<li>大空格，符号<code>\</code>，如：$x \ y$</li>
<li>中空格，符号<code>\:</code>，如：$x : y$</li>
<li>小空格，符号<code>\,</code>，如：$x , y$</li>
<li>没有空格，符号``，如：$xy$</li>
<li>紧贴，符号<code>\!</code>，如：$x ! y$</li>
</ol>
<h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol>
<li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li>
<li>中括号，符号：<code>[]</code>，如：$[x+y]$</li>
<li>大括号，符号：<code>\{ \}</code>，如：${x+y}$</li>
<li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li>
<li>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li>
<li>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：$\sum<em>{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A</em>{k<em>0}A</em>{k_1}\cdots$</li>
</ol>
<h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol>
<li>加法运算，符号：<code>+</code>，如：$x+y=z$</li>
<li>减法运算，符号：<code>-</code>，如：$x-y=z$</li>
<li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li>
<li>减甲运算，符号：<code>\mp</code>，如：$x \mp y=z$</li>
<li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li>
<li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li>
<li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li>
<li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li>
<li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li>
<li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：$\frac{x+y}{y+z}$</li>
<li>分式表示，符号：<code>{分子} \voer {分母}</code>，如：${x+y} \over {y+z}$</li>
<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>
</ol>
<h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol>
<li>平均数运算，符号：<code>\overline{算式}</code>，如：$\overline{xyz}$</li>
<li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li>
<li>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：$\sqrt[3]{x+y}$</li>
<li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li>
<li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li>
<li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li>
<li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li>
<li>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li>
</ol>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol>
<li>等于运算，符号：<code>=</code>，如：$x+y=z$</li>
<li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li>
<li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li>
<li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li>
<li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li>
<li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li>
<li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li>
<li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li>
<li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li>
<li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li>
<li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li>
<li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li>
</ol>
<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol>
<li>属于运算，符号：<code>\in</code>，如：$x \in y$</li>
<li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li>
<li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li>
<li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li>
<li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li>
<li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li>
<li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li>
<li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li>
<li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li>
<li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li>
<li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li>
<li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li>
<li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li>
<li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li>
<li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li>
<li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li>
<li>实数集合，符号：<code>\mathbb{R}</code>，如：<code>\mathbb{R}</code></li>
<li>自然数集合，符号：<code>\mathbb{Z}</code>，如：<code>\mathbb{Z}</code></li>
<li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li>
</ol>
<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol>
<li>无穷，符号：<code>\infty</code>，如：$\infty$</li>
<li>虚数，符号：<code>\imath</code>，如：$\imath$</li>
<li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li>
<li>数学符号，符号<code>\hat{a}</code>，如：$\hat{a}$</li>
<li>数学符号，符号<code>\check{a}</code>，如：$\check{a}$</li>
<li>数学符号，符号<code>\breve{a}</code>，如：$\breve{a}$</li>
<li>数学符号，符号<code>\tilde{a}</code>，如：$\tilde{a}$</li>
<li>数学符号，符号<code>\bar{a}</code>，如：$\bar{a}$</li>
<li>矢量符号，符号<code>\vec{a}</code>，如：$\vec{a}$</li>
<li>数学符号，符号<code>\acute{a}</code>，如：$\acute{a}$</li>
<li>数学符号，符号<code>\grave{a}</code>，如：$\grave{a}$</li>
<li>数学符号，符号<code>\mathring{a}</code>，如：$\mathring{a}$</li>
<li>一阶导数符号，符号<code>\dot{a}</code>，如：$\dot{a}$</li>
<li>二阶导数符号，符号<code>\ddot{a}</code>，如：$\ddot{a}$</li>
<li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li>
<li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li>
<li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li>
<li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li>
<li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li>
<li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li>
<li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li>
<li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li>
<li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li>
<li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li>
<li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li>
<li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li>
</ol>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><div class="table-container">
<table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr>
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>Λ</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr>
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <tags>
        <tag>博客           //多个标签可以这样添加</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>RB-Tree</title>
    <url>/2020/03/11/RB-Tree/</url>
    <content><![CDATA[<p>RB-Tree</p>
<a id="more"></a>
<h3 id="一、性质"><a href="#一、性质" class="headerlink" title="一、性质"></a>一、性质</h3><p><strong>RB-Tree是一棵二叉查找树，红黑树的性质：</strong></p>
<p>(1)每个节点或是红色的,或是黑色的.<br>(2)根节点是黑色的.<br>(3)每个叶节点（NULL）是黑色的.<br>(4)如果一个节点是红色的，则它的两个孩子节点都是黑色的.<br>(5)对每个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点.</p>
]]></content>
  </entry>
  <entry>
    <title>下载Zlib</title>
    <url>/2020/03/11/Zlib%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8C++/</url>
    <content><![CDATA[<p>下载Zlib</p>
<a id="more"></a>
<p><strong>1.下载Zlib</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget  http:&#x2F;&#x2F;www.zlib.net&#x2F;zlib-1.2.12.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>2.解压安装包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.12.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>3.配置编译程序存放路径</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;saber&#x2F;Downloads&#x2F;zlib_build&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>4. 修改链接库,配置交叉编译工具</strong></p>

<p><strong>5.安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make &amp; make install</span><br></pre></td></tr></table></figure>
<p><strong>6.检查编译结果</strong></p>

<p><strong>二、下载安装UnZip</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;infozip&#x2F;files&#x2F;UnZip%206.x%20%28latest%29&#x2F;UnZip%206.0&#x2F;unzip60.tar.gz</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;unix&#x2F;configure</span><br><span class="line">cp .&#x2F;unix&#x2F;Makefile .</span><br><span class="line">make</span><br><span class="line">make generic</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>esp32c3基于lvgl的图像显示</title>
    <url>/2023/11/20/esp32c3%E5%9F%BA%E4%BA%8Elvgl%E7%9A%84%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="esp32c3基于lvgl的图像显示"><a href="#esp32c3基于lvgl的图像显示" class="headerlink" title="esp32c3基于lvgl的图像显示"></a>esp32c3基于lvgl的图像显示</h2><a id="more"></a>
<p>软件环境：</p>
<p>Vscode、ESP_IDF</p>
<p>硬件环境：</p>
<p>ESP32C3、GC9A01</p>
<p><strong>基于spi_lcd_touch示例项目工程开发</strong></p>
<p>配置menuconfig——-&gt; Example Configuration——-&gt; LCD controller model (GC9A01)</p>
<p>使用<a href="https://www.iloveimg.com/zh-cn/resize-image#resize-options,pixels" target="_blank" rel="noopener">调整图像大小</a>工具，调整图像高度和宽度。</p>
<p>使用LVGL 提供的 Online Image Converter  工具，将图片转换成数组。</p>
<img src="/2023/11/20/esp32c3%E5%9F%BA%E4%BA%8Elvgl%E7%9A%84%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/image-20231120113626535.png" class="" title="image-20231120113626535">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LV_IMG_DECLARE(saber_1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">lv_obj_t</span> *img1 = lv_img_create(lv_scr_act());</span><br><span class="line">lv_img_set_src(img1, &amp;saber_1);</span><br><span class="line">lv_obj_align(img1, LV_ALIGN_CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">lv_obj_set_size(img1, <span class="number">240</span>, <span class="number">240</span>);</span><br></pre></td></tr></table></figure>
<p>图像显示效果</p>
<img src="/2023/11/20/esp32c3%E5%9F%BA%E4%BA%8Elvgl%E7%9A%84%E5%9B%BE%E5%83%8F%E6%98%BE%E7%A4%BA/image-20231120113638813.png" class="" title="image-20231120113638813">
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://docs.lvgl.io/8.3/libs/sjpg.html#example" target="_blank" rel="noopener">LVGL 文档</a></p>
<p><a href="https://www.iloveimg.com/zh-cn/resize-image#resize-options,pixels" target="_blank" rel="noopener">调整图像大小</a></p>
<p><a href="https://lvgl.io/tools/imageconverter" target="_blank" rel="noopener">Convert BMP, JPG, PNG, or SVG to C array or binary to use them in LVGL</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Delete-staic-files"><a href="#Delete-staic-files" class="headerlink" title="Delete staic files"></a>Delete staic files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.删除 .deploy文件夹</span></span><br><span class="line"><span class="comment"># 2.hexo g</span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://hexo.course.90byte.com/" target="_blank" rel="noopener">hexo 相关配置</a><br><a href="https://zhuanlan.zhihu.com/p/363300921" target="_blank" rel="noopener">Hexo日历插件</a><br><a href="https://www.cnblogs.com/chloneda/p/hexo.html" target="_blank" rel="noopener">Github+Hexo一站式部署个人博客</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 线程笔记</title>
    <url>/2020/03/11/linux-%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>linux 线程笔记</p>
<a id="more"></a>
<p><strong>Linux C++程序占用cpu</strong></p>
<ol>
<li>查看程序的进程号</li>
</ol>
<p>top -c , 输入<code>大写P</code>，top的输出会按使用cpu多少排序</p>
<p>​    2. 查看耗CPU的线程号</p>
<p>命令：<code>top -Hp 进程号</code>。 同样输入<code>大写P</code>，top的输出会按使用cpu多少排序。</p>
<p>输入<code>top -Hp 4918</code></p>
<ol>
<li>查看耗CPU的任务</li>
</ol>
<p><code>pstack 进程号</code>，会输出所有线程的堆栈信息</p>
<p><a href="https://blog.csdn.net/test1280/article/details/87974748" target="_blank" rel="noopener">Linux：获取线程的PID（TID、LWP）的几种方式</a></p>
<h3 id="gdb-调试多线程程序"><a href="#gdb-调试多线程程序" class="headerlink" title="gdb 调试多线程程序"></a>gdb 调试多线程程序</h3><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">gdb调试利器</a></p>
<ul>
<li>info threads: 显示当前可调试的所有线程</li>
<li>thread ID: 调试目标ID指定的线程</li>
<li>set scheduler-locking [off|on|step]</li>
</ul>
<h3 id="多线程环境"><a href="#多线程环境" class="headerlink" title="多线程环境"></a>多线程环境</h3><ul>
<li><p><strong>可重入函数</strong></p>
<p>如果一个函数能被多个线程同时调用且不发生竞态条件，则称它是线程安全的，或说它是可冲入函数。</p>
</li>
</ul>
<h2 id="什么时候使用Pimpl技术"><a href="#什么时候使用Pimpl技术" class="headerlink" title="什么时候使用Pimpl技术?"></a>什么时候使用Pimpl技术?</h2><p>可以看到Pimpl拥有如下优点：</p>
<ul>
<li><strong>减少依赖项（降低耦合性）：其一减少原类不必要的头文件的依赖，加速编译；其二对Impl类进行修改，无需重新编译原类。</strong></li>
<li><strong>接口和实现的分离（隐藏了类的实现）：私有成员完全可以隐藏在共有接口之外，给用户一个间接明了的使用接口，尤其适合闭源API设计。</strong></li>
<li><strong>可使用惰性分配技术：类的某部分实现可以写成按需分配或者实际使用时再分配，从而节省资源。</strong></li>
</ul>
<p>Pimpl也拥有一些缺点：</p>
<ul>
<li><strong>每个类需要占用小小额外的指针内存。</strong></li>
<li><strong>每个类每次访问具体实现时都要多一个间接指针操作的开销</strong>，并且再使用、阅读和调试上都可能有所不便。</li>
</ul>
<p>可以说，在性能/内存要求不敏感（非极端底层）的领域，Pimpl技术可以有相当不错的发挥和作用。</p>
<h3 id="可变参数模板"><a href="#可变参数模板" class="headerlink" title="可变参数模板"></a><a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">可变参数模板</a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如，STL的类模板tuple可以有任意个数的类型名（typename）作为它的模板形参（template parameter）</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt; <span class="class"><span class="keyword">class</span> <span class="title">tuple</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="现代C-特性——std-optional"><a href="#现代C-特性——std-optional" class="headerlink" title="现代C++特性——std::optional"></a><a href="https://www.jianshu.com/p/24b4361017f9" target="_blank" rel="noopener">现代C++特性——std::optional</a></h3><h3 id="std-future"><a href="#std-future" class="headerlink" title="std::future"></a><a href="https://www.cnblogs.com/haippy/p/3280643.html" target="_blank" rel="noopener">std::future</a></h3><p>可以用来获取异步任务的结果，可以把它当成一种简单的线程间同步的手段。</p>
<h3 id="std-chrono"><a href="#std-chrono" class="headerlink" title="std::chrono"></a><a href="">std::chrono</a></h3><p>一个time library, chrono是一个模版库，使用简单，功能强大，只需要理解三个概念：duration、time_point、clock。</p>
<h3 id="Linux-线程函数"><a href="#Linux-线程函数" class="headerlink" title="Linux 线程函数"></a>Linux 线程函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// 设置线程的唯一名称，长度限制16个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setname_np</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_getname_np</span><span class="params">(<span class="keyword">pthread_t</span> thread,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">char</span> *name, <span class="keyword">size_t</span> len)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="c-线程类std-thread"><a href="#c-线程类std-thread" class="headerlink" title="c++ 线程类std::thread"></a>c++ 线程类std::thread</h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>《Linux系统编程》</p>
<p>《Linux高性能服务器编程》</p>
<p><a href="https://www.onitroad.com/jc/linux/man-pages/linux/man3/pthread_setname_np.3.html" target="_blank" rel="noopener">Linux程序员手册</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux 网络编程笔记</title>
    <url>/2022/04/02/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>linux 网络编程相关知识点</p>
<a id="more"></a>
<p>[toc]</p>
<p><strong>linux 默认MTU: 1500字节</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">saber@saber-VirtualBox:~$ cat &#x2F;sys&#x2F;class&#x2F;net&#x2F;enp0s3&#x2F;mtu </span><br><span class="line">1500</span><br></pre></td></tr></table></figure>
<p><strong>MSS决定TCP的单包传输量</strong></p>
<p>往往用MTU值代替（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）所以往往MSS为1460</p>
<p>MSS为1460是由1500-20（IP头）-20（TCP头）计算出的。<br>实际场景下，TCP包头中会带有12字节的选项——时间戳。<br>这样，单个TCP包实际传输的最大量就缩减为1448字节。1448=1500-20（IP头）-32（20字节TCP头和12字节TCP选项时间戳）</p>
<h1 id="HTTP中Get与Post的区别"><a href="#HTTP中Get与Post的区别" class="headerlink" title="HTTP中Get与Post的区别"></a><strong>HTTP中Get与Post的区别</strong></h1><p>GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系 了。</p>
<p>POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力</p>
<p><strong>linux动态查看文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f -n 10 /tmp/log/Onecm_Gateway.log</span><br></pre></td></tr></table></figure>
<h1 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h1><ul>
<li>select 定时器</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">timeval tv;</span><br><span class="line">tv.tv_sec = <span class="number">1</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line">select(<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);</span><br></pre></td></tr></table></figure>
<ul>
<li>select 判断文件描述符 可读、可写</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_writeable</span><span class="params">(<span class="keyword">int</span> socket)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd_set fds;</span><br><span class="line">    FD_ZERO(&amp;fds);</span><br><span class="line">    FD_SET(socket, &amp;fds);</span><br><span class="line"></span><br><span class="line">    timeval tv;</span><br><span class="line">    tv.tv_sec = <span class="number">3</span>;</span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> select(socket + <span class="number">1</span>, <span class="literal">NULL</span>, &amp;fds, <span class="literal">NULL</span>, &amp;tv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _select_read(<span class="keyword">int</span> sock, <span class="keyword">time_t</span> sec, <span class="keyword">time_t</span> usec)</span><br><span class="line">&#123;</span><br><span class="line">    fd_set fds;</span><br><span class="line">    FD_ZERO(&amp;fds);</span><br><span class="line">    FD_SET(sock, &amp;fds);</span><br><span class="line"></span><br><span class="line">    timeval tv;</span><br><span class="line">    tv.tv_sec = <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span>&gt;(sec);</span><br><span class="line">    tv.tv_usec = <span class="keyword">static_cast</span>&lt;<span class="keyword">decltype</span>(tv.tv_usec)&gt;(usec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handle_EINTR([&amp;]()</span><br><span class="line">                        &#123; <span class="keyword">return</span> select(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(sock + <span class="number">1</span>), &amp;fds, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, &amp;tv); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>select 判断tcp client 是否还连接，重连操作</li>
</ul>
<p><strong>usleep() 有有很大的问题</strong></p>
<ol>
<li>在一些平台下不是线程安全，如HP-UX以及Linux</li>
<li><em>usleep()</em> 会影响信号</li>
<li>在很多平台，如HP-UX以及某些Linux下，当参数的值必须小于1 <em> 1000 </em> 1000也就是1秒，否则该函数会报错，并且立即返回。</li>
<li>大部分平台的帮助文档已经明确说了，该函数是已经被舍弃的函数。</li>
</ol>
<p>还好，POSIX规范中有一个很好用的函数，<em>nanosleep()</em> ，该函数没有<em>usleep()</em> 的这些缺点，它的精度是纳秒级。在Solaris的多线程环境下编译器会自动把<em>usleep()</em> 连接成<em>nanosleep()</em> 。</p>
<p>Linux下短延时推荐使用select函数.</p>
<p><strong>1 .connect调用失败后需关闭描述符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APPLICATION USAGE</span><br><span class="line">       If connect() fails, the state of  the  socket  is  unspecified. Conforming  applications</span><br><span class="line">       should close the file descriptor and create a new socket before attempting to reconnect.</span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><strong>参考文档</strong></h1><p><a href="[(62条消息">TCP传输的单个报文最大字节（MSS和MTU）</a> TCP传输的单个报文最大字节（MSS和MTU）_luck_horse的博客-CSDN博客_tcp最大发送字节](<a href="https://blog.csdn.net/qinrenzhi/article/details/85340048" target="_blank" rel="noopener">https://blog.csdn.net/qinrenzhi/article/details/85340048</a>))</p>
<p><a href="https://www.cnblogs.com/songyuchen/p/14038180.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/songyuchen/p/14038180.html" target="_blank" rel="noopener">关于c++中sleep_for函数的总结分析</a></a></p>
]]></content>
  </entry>
  <entry>
    <title>paho.mqtt.c 源码阅读</title>
    <url>/2022/04/08/paho.mqtt.c%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>paho.mqtt.c 源码阅读</p>
<a id="more"></a>
]]></content>
  </entry>
  <entry>
    <title>树莓派安装Mosquitto MQTT服务</title>
    <url>/2020/03/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85mqtt/</url>
    <content><![CDATA[<p>树莓派安装Mosquitto MQTT服务</p>
<a id="more"></a>
<h1 id="树莓派安装Mosquitto-MQTT服务"><a href="#树莓派安装Mosquitto-MQTT服务" class="headerlink" title="树莓派安装Mosquitto MQTT服务"></a>树莓派安装Mosquitto MQTT服务</h1><ul>
<li>更新apt的资源列表</li>
</ul>
<p>sudo apt-get update</p>
<ul>
<li>搜索可安装的MQTT</li>
</ul>
<p>apt search mqtt</p>
<p>MQTT分为服务器和客户端两部分。有很多MQTT软件包可选，我们选择比较流行的mosquitto。</p>
<ul>
<li>安装mosquitto 和mosquitto-clients</li>
</ul>
<p>sudo apt-get install mosquitto mosquitto-clients</p>
<p>说明：</p>
<p>mosquitto – the MQTT broker(MQTT代理，即MQTT服务)</p>
<p>mosquitto-clients – 命令行客户端，在调试时很有用。</p>
<ul>
<li>查看已经安装的mosquitto软件包</li>
</ul>
<p>dpkg -l mosquitto</p>
<h2 id="2-配置Mosquitto"><a href="#2-配置Mosquitto" class="headerlink" title="2. 配置Mosquitto"></a>2. 配置Mosquitto</h2><p>在使用Mosquitto之前，我们需要修改配置文件。配置文件位于/etc/mosquito。</p>
<ul>
<li>查看配置文件</li>
</ul>
<p>cat /etc/mosquitto/mosquitto.conf</p>
<p>注释中说：</p>
<p>1)   将本地配置放在/etc/mosquitto/conf.d/目录中。</p>
<p>我们看看/etc/mosquitto/conf.d/目录：</p>
<p><img src="https://img-blog.csdnimg.cn/20210323234647270.png" alt="img"></p>
<p>里面有一个说明文件，打开看看：</p>
<p><img src="https://img-blog.csdnimg.cn/20210323234654167.png" alt="img"></p>
<p>放置在该目录中的任何扩展名为.conf的文件都会被代理作为配置文件加载，用作本地配置。</p>
<p>2)   有一个完全的配置文件说明在：/usr/share/doc/mosquitto/examples/</p>
<p>复制配置文件mosquitto.conf.gz到/etc/mosquitto/conf.d/目录<br>sudo cp /usr/share/doc/mosquitto/examples/mosquitto.conf.gz /etc/mosquitto/conf.d/</p>
<p>进入/etc/mosquitto/conf.d/目录</p>
<p>解压mosquitto.conf.gz<br>sudo gzip -d mosquitto.conf.gz</p>
<p>编辑mosquitto.conf<br>sudo nano /etc/mosquitto/conf.d/mosquitto.conf</p>
<p>这是一个很大的文件，有800多行，所有的行都被#符号注释掉了。</p>
<p>我们修改下面几处，去掉注释符号，修改默认值：</p>
<p>user mosquitto</p>
<p>max_queued_messages 200</p>
<p>message_size_limit 0</p>
<p>allow_zero_length_clientid true</p>
<p>allow_duplicate_messages false</p>
<p>port 1883</p>
<p>autosave_interval 900</p>
<p>autosave_on_changes false</p>
<p>persistence true</p>
<p>persistence_file mosquitto.db</p>
<p>allow_anonymous false</p>
<p>Password_file /etc/mosquitto/passwd.conf</p>
<p>退回登录时的家目录</p>
<ol>
<li>生成账号密码<br>下面两种方法选一种。</li>
</ol>
<p>密文创建账户<br>sudo Mosquitto_passwd -c /etc/mosquitto/passwd.conf 用户名</p>
<p>输入两遍密码</p>
<p>我们的用户名为ct</p>
<p>sudo mosquitto_passwd -c /etc/mosquitto/passwd.conf ct</p>
<p>明文创建账户<br>sudo Mosquitto_passwd -b /etc/mosquitto/passwd.conf 用户名 密码</p>
<p>我们不用明文账户。</p>
<ol>
<li>测试Mosquitto服务<br>4.1 查看帮助<br>mosquitto -h</li>
</ol>
<p>4.2 测试mosquitto<br>需要开3个终端。</p>
<p>装载指定配置，启动mosquitto服务<br>mosquitto -c /etc/mosquitto/mosquitto.conf -v</p>
<p>-v记录所有类型的日志，因为我们在调试。以后正式使用mosquitto就不需要记录日志了，因为会占用存储空间。</p>
<p>上面提示日志文件mosquitto.log的权限不够：</p>
<p>ls -l /var/log/mosquitto/mosquitto.log</p>
<p>修改权限：</p>
<p>sudo chmod 666 /var/log/mosquitto/mosquitto.log</p>
<p>再执行：</p>
<p>mosquitto -c /etc/mosquitto/mosquitto.conf -v</p>
<p>服务运行，终端窗口被占用。</p>
<p>测试publish 和subscribe<br>再打开两个终端：</p>
<p>1) 一个终端执行：</p>
<p>mosquitto_sub -p 1883 -u ct -P xxxxxx -t “test”</p>
<p>订阅subscribe主题Topic：test，等待接收消息。</p>
<p>2) 另一个终端执行：</p>
<p>mosquitto_pub -p 1883 -u ct -P xxxxxx -t test -m “Hello!”</p>
<p>发布主题为test的消息Hello!</p>
<p>3) 订阅窗口显示接收到的消息</p>
<p>4) 查看日志</p>
<p>sudo cat /var/log/mosquitto/mosquitto.log</p>
<p>5) 正式运行mosquitto服务</p>
<p>重新启动树莓派<br>sudo reboot</p>
<p>查看正在运行的mosquitto进程<br>ps -ef | grep mosquitto</p>
<p>mosquitto已经在后台启动。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://zhuanlan.zhihu.com/p/164930347" target="_blank" rel="noopener">Linux搭建MQTT服务器（mosquitto）并使用</a></p>
]]></content>
  </entry>
  <entry>
    <title>深度学习入门笔记</title>
    <url>/2020/03/12/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>深度学习相关知识点</p>
<a id="more"></a>
<h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p><font color="red">激活函数必须使用非线性函数</font><br>线性函数的问题在于，不管如何加深层数，总是存在与之等效的 “无隐藏层的神经网络”。</p>
<h5 id="隐藏层激活函数"><a href="#隐藏层激活函数" class="headerlink" title="隐藏层激活函数"></a>隐藏层激活函数</h5><ul>
<li>阶跃函数</li>
<li>ReLU函数</li>
<li>sigmoid                                        </li>
</ul>
<h5 id="输出层激活函数"><a href="#输出层激活函数" class="headerlink" title="输出层激活函数"></a>输出层激活函数</h5><ul>
<li>恒等函数—&gt;  回归问题</li>
<li>sigmoid —-&gt; 二元分类</li>
<li>softmax —-&gt; 多元分类  </li>
</ul>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>损失函数是神经网络型性能的“恶劣层度”的指标，即当前的神经网络对监督数据在多大程度上不拟合，<br>在多大程度上不一致。</p>
<ul>
<li>均方误差  </li>
</ul>
<script type="math/tex; mode=display">
  E = \ce{1/2 \Sigma (y_k- t_k)^2}</script><script type="math/tex; mode=display">
y_k 表示神经网络的输出，t_k表示监督数据， k表示数据的维度。</script><ul>
<li>交叉熵误差   </li>
</ul>
<script type="math/tex; mode=display">
E = - \Sigma t_k \log y_k</script><script type="math/tex; mode=display">
\log 表示以e为底的自然对数, y_k是神经网络的输出，t_k是正确解标签。</script><script type="math/tex; mode=display">
t_k中只有正确解标签的索引为1，其他均为0(one-hot表示)，</script><p>交叉熵误差的值是由正确解标签所对应的输出结果决定的。                                                                                          </p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
  </entry>
  <entry>
    <title>系统构建</title>
    <url>/2020/03/12/%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>系统构建相关知识点</p>
<a id="more"></a>
<ol>
<li>创建时间子系统</li>
<li>创建内存分配子系统(空间)</li>
<li>创建定时器子系统</li>
<li>业务子系统</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>树莓派安装OpenSSL</title>
    <url>/2020/03/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85openssl/</url>
    <content><![CDATA[<p>树莓派安装OpenSSL</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget  --no-check-certificate  https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.1.1d.tar.gz</span><br><span class="line">tar zxf openssl-1.1.1d.tar.gz</span><br><span class="line">cd openssl-1.1.1d</span><br><span class="line">.&#x2F;config --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl --openssldir&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl </span><br><span class="line">make -j4 &amp;&amp; make install</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
